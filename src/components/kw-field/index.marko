
// TODO  input-sm and  input-lg
// TODO handle has-icon-left and has-icon-right ... think about forms and validation
// TODO input-group
// TODO form validation

class {
  onCreate (input, out) {
    this.state = {
      name: input.name,
      value: input.value,
      form: input.form,
      selected: input.selected,
      checked: input.checked,
      options: [],
      renderHorizontal: false,
      selectedIndex: null
    };
  }

  onInput (input) {

    if(input.options) {
      this.state.options = input.options;
    }

  }

  getParentForm() {
    if(!this.el) {
      return;
    }
    var parent = this.el.parentElement;
    while(parent && (parent.nodeName != "FORM")) {
      parent = parent.parentElement
    }
    return parent;
  }

  onMount () {

    var parentForm = this.getParentForm();
    if(parentForm) {
      this.state.renderHorizontal = parentForm.classList.contains("form-horizontal");
      this.state.form = parentForm.name;
    }

  }

  handleOnChange(ev, el) {

    if(ev.target.tagName == "INPUT" && ev.target.type == "radio") {
      var index = parseInt(el.attributes.index.value);
      this.state.options.forEach(function (opt, i) {
        opt.checked = index === i;
      });
      this.state.value = this.state.options[index].value;
      this.state.selectedIndex = index;
    } else if(ev.target.tagName == "INPUT" && ev.target.type == "checkbox") {
      this.state.checked = el.checked;
    } else if (ev.target.tagName == "INPUT") {
      this.state.value = el.value;
    } else if (ev.target.tagName == "SELECT") {

      if(this.state.selectedIndex != null && el.selectedIndex != this.state.selectedIndex) {
        this.state.options[this.state.selectedIndex].selected = false;
      }

      this.state.options[el.selectedIndex].selected = true;
      this.state.value = this.state.options[el.selectedIndex].value;
      this.state.selectedIndex = el.selectedIndex;

    } else if (ev.target.tagName == "TEXTAREA") {
      this.state.value = el.value;
    }

    // TODO think about normalizing and re-emitting or just let it pasthrough
    // console.log("fieldchange", this.state.name, this.state.value, ev, el);
    this.emit("change", this.state.name, this.state.value, ev, el);
  }

}

<div.form-group>

  <if(input.label && ["checkbox", "switch"].indexOf(input.type) === -1)>
    <label.form-label class=[(state.renderHorizontal && "col-3")]>${input.label}</label>
  </if>
  <else if(state.renderHorizontal)>
    <div.col-3></div>
  </else>


  <div class=[(state.renderHorizontal && "col-9")]>

    <if(input.type == "select")>
      <select.form-select on-change("handleOnChange") value=state.value>
        <!-- <include(input.renderBody) /> -->
        <!-- <option if(input.placeholder) value=null>${input.placeholder}</option> -->
        <option for(option in state.options) value=option.value selected=option.selected>
          ${option.label ? option.label : option.value}
        </option>
      </select>
    </if>
    <else-if(input.type == "radio")>
      <label.form-radio for(option in state.options | status-var=loop)>
        <input type="radio" form=state.form name=input.name value=option.value on-change("handleOnChange") index=loop.getIndex() checked=option.checked />
          <i.form-icon></i>${option.label}
      </label>
    </else-if>
    <else-if(input.type == "checkbox" || input.type == "switch")>
      <label class=["form-${input.type}"]>
        <input type="checkbox" form=state.form name=input.name value=state.value on-change("handleOnChange") checked=state.checked>
        <i.form-icon></i> ${input.label}
      </label>
    </else-if>
    <else-if(input.type == "textarea")>
      <textarea.form-input name=input.name form=state.form placeholder=input.placeholder on-change("handleOnChange") value=state.value>${state.value}</textarea>
    </else-if>
    <else>
      <input.form-input type=input.type name=input.name form=state.form placeholder=input.placeholder on-change("handleOnChange") value=state.value>
    </else>

  </div>

</div>
